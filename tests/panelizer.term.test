<?php
/**
 * @file
 * Panelizer tests.
 */

/**
 * Verifies Panelizer configuration options for taxonomy terms.
 */
class PanelizerTermTest extends PanelizerTestHelper {

  protected $vocabulary;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Panelizer term workflow (excluding IPE)',
      'description' => 'Test the typical workflow of working with terms, excluding IPE.',
      'group' => 'Panelizer',
      'dependencies' => array('ctools', 'panels', 'taxonomy'),
    );
  }

  /**
   * {@inheritdoc}
   */
  function setUp(array $modules = array()) {
    parent::setUp();

    $web_user = $this->drupalCreateUser(array('administer taxonomy', 'administer panelizer'));
    $this->drupalLogin($web_user);

    $edit = array(
      'name' => 'Panelizer Vocabulary',
      'machine_name' => 'panelizer_vocabulary',
      'description' => 'Panelizer worflow test vocabulary',
      'hierarchy' => 1,
      'module' => 'panelizer',
      'weight' => -10,
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
    $this->vocabulary = $vocabulary;
  }

  /**
   * Helper function to create a taxonomy term.
   *
   * @return object
   *   A taxonomy term object.
   */
  protected function createTestTerm() {
    $edit = array(
      'name' => t('Test Panelizer Term'),
      'description' => "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book",
      'parent' => array(0),
      'vid' => $this->vocabulary->vid,
    );
    $term = (object) $edit;
    taxonomy_term_save($term);
    return $term;
  }

  /**
   * Helper function to quickly enable Panelizer for a vocabulary.
   *
   * @param $default_status
   * @param $default_default
   */
  protected function enableVocabPanelizer($default_status = 1, $default_default = 0) {
    variable_set('panelizer_defaults_taxonomy_term_' . $this->vocabulary->machine_name, array(
      'status' => 1,
      'help' => '',
      'view modes' => array(
        'page_manager' => array(
          'status' => 0,
          'substitute' => 0,
          'default' => 0,
          'choice' => 0,
        ),
        'default' => array(
          'status' => $default_status,
          'substitute' => 0,
          'default' => $default_default,
          'choice' => 0,
        ),
      ),
    ));
  }

  /**
   * Test the vocabulary configuration functionality.
   */
  function testVocabularyConfiguration() {
    // Panelize the test vocabulary.
    $edit = array();
    $edit['panelizer[status]'] = TRUE;
    $this->drupalPost('admin/structure/taxonomy/panelizer_vocabulary/edit', $edit, t('Save'));
    $this->assertResponse(200);

    $term = $this->createTestTerm();

    // Verify the term can be panelized.
    $this->drupalGet('taxonomy/term/' . $term->tid);
    $this->assertResponse(200);
    $this->assertLink('Customize display', 0, 'The customize display link appears on the page');
    $this->assertLinkByHref('taxonomy/term/' . $term->tid . '/panelizer', 0, 'A link to customize the node appears on the page');

    // Allow panelization of the "Default" view mode.
    $edit = array();
    $edit['panelizer[view modes][default][status]'] = TRUE;
    $edit['panelizer[view modes][default][default]'] = TRUE;
    $this->drupalPost('admin/structure/taxonomy/panelizer_vocabulary/edit', $edit, t('Save'));
    $this->assertResponse(200);

    // Check that the view mode has been panelized.
    $this->drupalGet('taxonomy/term/' . $term->tid);
    $this->assertResponse(200);
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panelizer-view-mode'));
    $this->assertEqual(count($elements), 1, 'The term is panelized.');
  }

  /**
   *
   */
  function testTermPanelizeIt() {
    $this->enableVocabPanelizer();
    $term = $this->createTestTerm();

    // Check that the view mode can be panelized.
    $this->drupalGet('taxonomy/term/' . $term->tid . '/panelizer');
    $this->assertResponse(200);
    $this->assertText('Default');
    $this->assertLink('panelize', 0, 'The panelize link for the default view mode appears on the page');
    $this->assertLinkByHref('taxonomy/term/' . $term->tid . '/panelizer/default', 0, 'A link to panelize the default view mode appears on the page');

    // Verify that the view mode is not currently panelized.
    $this->drupalGet('taxonomy/term/' . $term->tid . '/panelizer/default');
    $this->assertResponse(200);
    $this->assertRaw(t('This %entity is not currently panelized.', array('%entity' => 'Taxonomy term')));

    // Panelize the view mode.
    $this->drupalPost(NULL, array(), t('Panelize it!'));
    $this->assertResponse(200);

    // Check that the view mode has been panelized.
    $this->drupalGet('taxonomy/term/' . $term->tid);
    $this->assertResponse(200);
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panelizer-view-mode'));
    $this->assertEqual(count($elements), 1, 'The term is panelized.');
  }

  /**
   *
   */
  function testTermPanelsDefault() {
    $this->enableVocabPanelizer(1, 1);
    $term = $this->createTestTerm();

    // Verify that the view mode has a default panel.
    $this->drupalGet('admin/structure/taxonomy/panelizer_vocabulary/panelizer');
    $this->assertResponse(200);
    $this->assertLinkByHref('admin/structure/taxonomy/panelizer_vocabulary/panelizer/default', 0, 'User is able to provide default panel for default');

    $edit = array();
    $edit['layout'] = 'twocol_bricks';
    $this->drupalPost('admin/structure/taxonomy/panelizer_vocabulary/panelizer/default/layout', $edit, t('Save'));

    // Check that the layout has been set.
    $this->drupalGet('taxonomy/term/' . $term->tid);
    $this->assertResponse(200);
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panel-2col-bricks'));
    $this->assertEqual(count($elements), 1, 'The default term layout has been set.');
  }

}
